<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zero Trust on Gene Wahrlich</title>
    <link>https://wahrlich.github.io/tags/zero-trust/</link>
    <description>Recent content in Zero Trust on Gene Wahrlich</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, Gene Wahrlich.</copyright>
    <lastBuildDate>Thu, 03 Oct 2024 11:49:23 +1000</lastBuildDate>
    <atom:link href="https://wahrlich.github.io/tags/zero-trust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>There is no perimeter</title>
      <link>https://wahrlich.github.io/post/there-is-no-perimeter/</link>
      <pubDate>Thu, 03 Oct 2024 11:49:23 +1000</pubDate>
      <guid>https://wahrlich.github.io/post/there-is-no-perimeter/</guid>
      <description>&lt;h2 id=&#34;let-me-tell-you-a-story&#34;&gt;Let me tell you a story&lt;/h2&gt;&#xA;&lt;p&gt;A few years ago, I was working with a company that had a traditional approach to security. You know the type: a big firewall around the internal network, with the assumption that everything inside was safe and cozy. As long as you were “in the network,” you were trusted. They had one big Active Directory (AD) domain and everything could access everything else.&lt;/p&gt;&#xA;&lt;p&gt;That assumption came back to bite them. I was hired to do a pentest of some new APIs and I realised quickly that they were themselves talking to some other, older APIs that had been running the company&amp;rsquo;s core business for the past 20 years. Since I was inside the trust boundary, I could access the old APIs directly and bypass the authentication and authorisation enforced by the new APIs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
